/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mtatrace;

import com.viettel.common.bo.LogEmailMTA;
import com.viettel.common.util.ActionThread;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.logging.Level;
import org.apache.commons.io.input.ReversedLinesFileReader;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

public class LogEmailProcess extends ActionThread {

    private LinkedBlockingQueue<LogEmailMTA> queueLogEmail;
    private String host = "zimbra.viettel.com.vn";

//    private String folderDirectory = "D:\\sourcecode\\MtaTrace\\0\\";
//    private String filePathMailLog = "F:\\SOURCE CODE\\khoand\\CODE\\LogEmail\\SAVE DB\\log\\logEmail.txt"
    private String filePathMailLog = "/opt/zimbra/log/mailbox.log";

//    private String folderDirectory = "/home/app/msg/";
//    private String errorDirectory = "D:\\sourcecode\\MtaTrace\\error\\";
//    private String errorDirectory = "F:\\SOURCE CODE\\khoand\\CODE\\LogEmail\\SAVE DB\\log\\error\\";
//    private String errorDirectory = "../";
//    private String errorDirectory = "/home/app/MtaTrace/error/";
     private String config = "../etc/config.properties";
     private String configLog4j = "../etc/log4j.conf";
//    private String config = "F:\\SOURCE CODE\\khoand\\DOCUMENT\\ReadLog\\config.properties";
//     private String configLog4j = "F:\\\\SOURCE CODE\\\\khoand\\\\CODE\\\\LogEmail\\\\SAVE DB\\\\MtaTrace\\\\etc\\\\log4j.conf";
    private static final String Read_Email = "GetMsgRequest";
    private static final String Delete_Email = "MsgActionRequest";
    private static final String Search_Email = "SearchRequest";
//    File dirDes = new File(errorDirectory);
    private static Logger logger;
    private long lastKnownPosition = 0;
    private static Date lastDateTime = null;
    //10%
    private int percentLogRead = 100;
    // number log read in each 100 logs
    private int numberLogRead = 0;
    private int NUMBER_LINE_READ_ONE_TIME = 0;
    private int SLEEP_TIME = 0;
    private long timeStart;
    static SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private Date lastTime;
    //gia tri date Cao nhat moi lan chay
    private Date maxTime;
    private long timeRun = 0;

    public LogEmailProcess(String name, LinkedBlockingQueue<LogEmailMTA> queueMsg) {
        this.setName(name);
        this.queueLogEmail = queueMsg;
        this.logger = Logger.getLogger("maillog");
//        PropertyConfigurator.configure("D:\\sourcecode\\MtaTrace\\MtaTrace\\etc\\log4j.conf");
        PropertyConfigurator.configure(configLog4j);
        logger.info("Mail Log Process Start");
        System.out.println("Mail Log Process Start");
        numberLogRead = percentLogRead;
        timeStart = System.currentTimeMillis();
    }

    private void getConfig() {
        Properties properties = new Properties();
        FileInputStream fileInputStream = null;
        logger.info("LogEmailProcess get Config");
        System.out.println("get config EMAIL");
        try {
            fileInputStream = new FileInputStream(config);
            properties.load(fileInputStream);
            this.filePathMailLog = properties.getProperty("folderDirectory_MailLog");
//            this.errorDirectory = properties.getProperty("errorDirectory");
            this.numberLogRead = Integer.parseInt(properties.getProperty("percentLogRead_MailLog"));
            this.NUMBER_LINE_READ_ONE_TIME = Integer.parseInt(properties.getProperty("NUMBER_LINE_READ_ONE_TIME_MAIL"));
            this.SLEEP_TIME = Integer.parseInt(properties.getProperty("SleepTime_Mail"));
//            System.out.println("filePathMailLog "+filePathMailLog);
            logger.info("NUMBER_LINE_READ_ONE_TIME  "+NUMBER_LINE_READ_ONE_TIME);
            logger.info("filePathMailLog "+filePathMailLog);
            logger.info("SLEEP_TIME "+SLEEP_TIME);
        } catch (IOException ex) {
            logger.info(ex.getMessage());
            System.out.println(ex.getMessage());

        } finally {
            if (fileInputStream != null) {
                try {
                    fileInputStream.close();
                } catch (IOException ex) {
                    logger.info(ex);

                }
            }
        }

    }

    private void readFileMailLog() throws IOException, FileNotFoundException, InterruptedException {
        try {
            File file = new File(filePathMailLog);
            String sCurrentLine = "";
            int counter = 0;
            ReversedLinesFileReader object = new ReversedLinesFileReader(file);
            long l = file.length();
            System.out.println("lenght "+l+" lastKnownPosition "+lastKnownPosition);
            if (l > this.lastKnownPosition) {
                this.lastKnownPosition = l;
                while (!(sCurrentLine = object.readLine()).isEmpty() && counter < NUMBER_LINE_READ_ONE_TIME && checkTimeIsAfterLasTime(sCurrentLine,counter)) {
                    counter++;
                    System.out.println("counter EMAIL " + counter + "__ " + queueLogEmail.size());
//                
                    LogEmailMTA logEmail = null;
                    switch (getTypeLine(sCurrentLine)) {
                        case 0:
                            logEmail = getInforReadEmail(sCurrentLine);
                            break;
                        case 1:
                            logEmail = getInforDeleteEmail(sCurrentLine);
                            break;
                        case 2:
                            logEmail = getInforSearchEmail(sCurrentLine);
                            break;

                        default:
                            break;

                    }
                    if (logEmail != null) {
                        logEmail.setType_log("MAIL");
//                    if(queueLogEmail.size() > 1950){
//                        queueLogEmail.clear();
//                    }
                        queueLogEmail.add(logEmail);
                    }
                }
                lastTime = maxTime;
            }else{
                System.out.println("No Have any new Line ===");
                logger.info("No Have any new Line ===");
            }
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
            this.logger.error((Object) ("Error : " + ex.getMessage()));
        } catch (IOException ex) {
            ex.printStackTrace();
            this.logger.error((Object) ("Error : " + ex.getMessage()));
        }

    }

    @Override
    protected void action() throws Exception {
        getConfig();
        readFileMailLog();
        timeRun++;
    }

    @Override
    protected void onExecuting() throws Exception {

    }

    @Override
    protected void onKilling() {

    }

    @Override
    protected void onException(Exception e) {

    }

    @Override
    protected long sleeptime() throws Exception {
        return SLEEP_TIME*60*1000;
//        return 5*1000;
    }

    private static LogEmailMTA getInforSearchEmail(String sCurrentLine) {
        String input = sCurrentLine;
        LogEmailMTA logEmail = null;
        String time = input.substring(0, 19);
        String miliSecond = input.substring(20, 23);
        input = input.substring(24);
        String status = input.split("  ")[0];
        String ip = StringUtils.substringBetween(input, "ip=", ";");
        String oIp = StringUtils.substringBetween(input, "oip=", ";");
        String inforAction = "";
        if(input.indexOf("[qtp") > 0 && input.indexOf("]") > 0){
            inforAction = input.substring(input.indexOf("[qtp"), input.indexOf("]"));
        }

        String ua = StringUtils.substringBetween(input, "ua=", "]");
        String elapsed = "";
        if (input.split("elapsed=").length > 1) {
            elapsed = input.split("elapsed=")[1];
        }
        String result = "SUCCESS";
        int num_elapse = -1;
        try {
            num_elapse = Integer.parseInt(elapsed);

            if (num_elapse > 0) {
                result = "SUCCESS";
            }
        } catch (Exception e) {
        }
        String emailName = StringUtils.substringBetween(input, "name=", ";");
         //add substring
        if (ip != null && ip.length() > 199) {
            ip = ip.substring(0, 199);
        }
        if (inforAction != null && inforAction.length() > 199) {
            inforAction = inforAction.substring(0, 199);
        }
        if (oIp != null && oIp.length() > 199) {
            oIp = oIp.substring(0, 199);
        }
        if (ua != null && ua.length() > 199) {
            ua = ua.substring(0, 199);
        }
        if (emailName != null && emailName.length() > 200) {
            emailName = emailName.substring(0, 199);
        }
        if (status != null && status.length() > 45) {
            status = status.substring(0, 44);
        }
        //add substring end
        if (time != null ) {
            logEmail = new LogEmailMTA();
            logEmail.setTime(time);
        }
        if (logEmail != null) {

            if (status != null) {
                logEmail.setStatus(status);
            }
            if (ip != null) {
                logEmail.setIp(ip);
            }
            if (oIp != null) {
                logEmail.setoIp(oIp);
            }
            if (ua != null) {
                logEmail.setUa(ua);
            }
            
            logEmail.setElapsed(num_elapse);
            
            if (result != null) {
                logEmail.setResult(result);
            }
            long num = -1;
            if (miliSecond != null) {
                try {
                    num = Long.parseLong(miliSecond);
                } catch (NumberFormatException e) {
                    logger.error("Cant get Value off miliSecond");
                }
                if (num > 0) {
                    logEmail.setMiliSecond(num);
                }

            }
            if (inforAction != null) {
                logEmail.setInforAction(inforAction);
            }
            if (emailName != null) {
                logEmail.setName_email(emailName);
            }
            logEmail.setAction("SEARCH_EMAIL");
        }
        return logEmail;
    }

    private static LogEmailMTA getInforDeleteEmail(String sCurrentLine) {
        String input = sCurrentLine;
        LogEmailMTA logEmail = null;
        String time = input.substring(0, 19);
        String miliSecond = input.substring(20, 23);
        input = input.substring(24);
        String status = input.split("  ")[0];
        String ip = StringUtils.substringBetween(input, "ip=", ";");
        String oIp = StringUtils.substringBetween(input, "oip=", ";");
        String inforAction = "";
        if(input.indexOf("[qtp") > 0 && input.indexOf("]") > 0){
            inforAction = input.substring(input.indexOf("[qtp"), input.indexOf("]"));
        }

        String ua = StringUtils.substringBetween(input, "ua=", "]");
        String elapsed = "";
        if (input.split("elapsed=").length > 1) {
            elapsed = input.split("elapsed=")[1];
        }
        String result = "SUCCESS";
        int num_elapse = -1;
        try {
            num_elapse = Integer.parseInt(elapsed);

            if (num_elapse > 0) {
                result = "SUCCESS";
            }
        } catch (Exception e) {
        }
        String emailName = StringUtils.substringBetween(input, "name=", ";");
        //add substring
        if (ip != null && ip.length() > 199) {
            ip = ip.substring(0, 199);
        }
        if (inforAction != null && inforAction.length() > 199) {
            inforAction = inforAction.substring(0, 199);
        }
        if (oIp != null && oIp.length() > 199) {
            oIp = oIp.substring(0, 199);
        }
        if (ua != null && ua.length() > 199) {
            ua = ua.substring(0, 199);
        }
        if (emailName != null && emailName.length() > 200) {
            emailName = emailName.substring(0, 199);
        }
        if (status != null && status.length() > 45) {
            status = status.substring(0, 44);
        }
        //add substring end
        if (time != null ) {
            logEmail = new LogEmailMTA();
            logEmail.setTime(time);
        }
        if (logEmail != null) {

            if (status != null) {
                logEmail.setStatus(status);
            }
            if (ip != null) {
                logEmail.setIp(ip);
            }
            if (oIp != null) {
                logEmail.setoIp(oIp);
            }
            if (ua != null) {
                logEmail.setUa(ua);
            }
            
            logEmail.setElapsed(num_elapse);
            
            if (result != null) {
                logEmail.setResult(result);
            }
            long num = -1;
            if (miliSecond != null) {
                try {
                    num = Long.parseLong(miliSecond);
                } catch (NumberFormatException e) {
                    logger.error("Cant get Value off miliSecond");
                }
                if (num > 0) {
                    logEmail.setMiliSecond(num);
                }
            }
            if (inforAction != null) {
                logEmail.setInforAction(inforAction);
            }
            if (emailName != null) {
                logEmail.setName_email(emailName);
            }

            logEmail.setAction("DELETE_EMAIL");
        }
        return logEmail;
    }

    private static LogEmailMTA getInforReadEmail(String sCurrentLine) {
        String input = sCurrentLine;
        LogEmailMTA logEmail = null;
        String time = input.substring(0, 19);
        
                
        String miliSecond = input.substring(20, 23);
        input = input.substring(24);
        String status = input.split("  ")[0];
        String ip = StringUtils.substringBetween(input, "ip=", ";");
        String oIp = StringUtils.substringBetween(input, "oip=", ";");
        String inforAction = "";
        if(input.indexOf("[qtp") > 0 && input.indexOf("]") > 0){
            inforAction = input.substring(input.indexOf("[qtp"), input.indexOf("]"));
        }
        String ua = StringUtils.substringBetween(input, "ua=", "]");
        String elapsed = "";
        if (input.split("elapsed=").length > 1) {
            elapsed = input.split("elapsed=")[1];
        }
        String result = "SUCCESS";
        int num_elapse = -1;
        try {
            num_elapse = Integer.parseInt(elapsed);

            if (num_elapse > 0) {
                result = "SUCCESS";
            }
        } catch (Exception e) {
        }
        String emailName = StringUtils.substringBetween(input, "name=", ";");
        
        //add substring
        if (ip != null && ip.length() > 199) {
            ip = ip.substring(0, 199);
        }
        if (inforAction != null && inforAction.length() > 199) {
            inforAction = inforAction.substring(0, 199);
        }
        if (oIp != null && oIp.length() > 199) {
            oIp = oIp.substring(0, 199);
        }
        if (ua != null && ua.length() > 199) {
            ua = ua.substring(0, 199);
        }
        if (emailName != null && emailName.length() > 200) {
            emailName = emailName.substring(0, 199);
        }
        if (status != null && status.length() > 45) {
            status = status.substring(0, 44);
        }
        //add substring end
        if (time != null ) {
            logEmail = new LogEmailMTA();
            logEmail.setTime(time);
        }
        if (logEmail != null) {

            if (status != null) {
                logEmail.setStatus(status);
            }
            if (ip != null) {
                logEmail.setIp(ip);
            }
            if (oIp != null) {
                logEmail.setoIp(oIp);
            }
            if (ua != null) {
                logEmail.setUa(ua);
            }
            
            logEmail.setElapsed(num_elapse);
            
            if (result != null) {
                logEmail.setResult(result);
            }
            long num = -1;
            if (miliSecond != null) {
                try {
                    num = Long.parseLong(miliSecond);
                } catch (NumberFormatException e) {
                    logger.error("Cant get Value off miliSecond");
                }
                if (num > 0) {
                    logEmail.setMiliSecond(num);
                }
            }
            if (inforAction != null) {
                logEmail.setInforAction(inforAction);
            }
            if (emailName != null) {
                logEmail.setName_email(emailName);
            }
            logEmail.setAction("READ_EMAIL");
        }
        return logEmail;
    }

    private static int getTypeLine(String sCurrentLine) {
        if (sCurrentLine.length() == 0 || !Character.isDigit(sCurrentLine.charAt(0))) {
            return -1;
        }
        if (sCurrentLine.contains(Read_Email)) {
            return 0;
        }
        if (sCurrentLine.contains(Delete_Email)) {
            return 1;
        }
        if (sCurrentLine.contains(Search_Email)) {
            return 2;
        }
        return -1;
    }

    public static int countLines(String filename) throws IOException {
        InputStream is = new BufferedInputStream(new FileInputStream(filename));
        try {
            byte[] c = new byte[1024];
            int count = 0;
            int readChars = 0;
            boolean empty = true;
            while ((readChars = is.read(c)) != -1) {
                empty = false;
                for (int i = 0; i < readChars; ++i) {
                    if (c[i] == '\n') {
                        ++count;
                    }
                }
            }
            return (count == 0 && !empty) ? 1 : count;
        } finally {
            is.close();
        }
    }

    /**
     *Nếu thời gian line hiện tại truoc last time thì trả về false
     * không trả về true
     * @param sCurrentLine
     * @return 
     */
    private boolean checkTimeIsAfterLasTime(String sCurrentLine,int counter) {
        
        if(sCurrentLine.equals(null)){
            return true;
        }
        if(sCurrentLine.length() > 20){
            String dateInString = sCurrentLine.substring(0, 19);
            
            try {
                Date nowTime = formatter.parse(dateInString);
                if(lastTime == null){
                    System.out.println("Set lastTime ==="+counter);
                    logger.info("Set lastTime ===");
                    lastTime = nowTime;
                    return true;
                }
                if (counter == 0) {
                    if (nowTime.before(lastTime)) {
                        System.out.println("Not after Last Time ===");
                        logger.info("Not after Last Time ===");
                        return false;
                    } else{
                        maxTime = nowTime;
                    }
                }else if(timeRun > 0){
                    if (nowTime.before(lastTime)) {
                        System.out.println("Not after Last Time ===");
                        logger.info("Not after Last Time ===");
                        return false;
                    }
                }
            } catch (ParseException ex) {
                return true;
            }
            
        }
        return true;
    }


}
